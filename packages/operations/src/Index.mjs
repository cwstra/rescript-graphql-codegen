// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CorePlus from "@rescript-graphql-codegen/core-plus/src/CorePlus.mjs";
import * as AST$Graphql from "@rescript-graphql-codegen/graphql/src/AST.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as Helpers$GraphqlCodegen from "@rescript-graphql-codegen/graphql-codegen/src/Helpers.mjs";
import * as WorkItem$GraphqlCodegenOperations from "./WorkItem.mjs";

async function plugin(schema, documents, config) {
  try {
    var match = CorePlus.Either.partition(CorePlus.$$Array.filterMap(documents.flatMap(function (d) {
                  return AST$Graphql.addTypenameToDocument(d.document).definitions;
                }), (function (d) {
                switch (d.kind) {
                  case "OperationDefinition" :
                      return {
                              TAG: "Right",
                              _0: {
                                kind: "OperationDefinition",
                                loc: d.loc,
                                operation: d.operation,
                                name: d.name,
                                variableDefinitions: d.variableDefinitions,
                                directives: d.directives,
                                selectionSet: d.selectionSet
                              }
                            };
                  case "FragmentDefinition" :
                      return {
                              TAG: "Left",
                              _0: {
                                kind: "FragmentDefinition",
                                loc: d.loc,
                                name: d.name,
                                variableDefinitions: d.variableDefinitions,
                                typeCondition: d.typeCondition,
                                directives: d.directives,
                                selectionSet: d.selectionSet
                              }
                            };
                  default:
                    return ;
                }
              })));
    var allFragments = CorePlus.$$Option.getOr(config.externalFragments, []).map(function (e) {
            return AST$Graphql.addTypenameToFragment(e.node);
          }).concat(match[0]);
    var fragmentLookup = Object.fromEntries(allFragments.map(function (f) {
              return [
                      AST$Graphql.NameNode.value(AST$Graphql.FragmentDefinitionNode.name(f)),
                      f
                    ];
            }));
    var sorted = Helpers$GraphqlCodegen.sortFragmentsTopologically(allFragments).map(function (prim) {
            return prim;
          }).concat(match[1].map(function (prim) {
              return prim;
            }));
    var init = WorkItem$GraphqlCodegenOperations.fromDefinitions(sorted);
    var res = WorkItem$GraphqlCodegenOperations.$$process(init, fragmentLookup, schema, config.baseTypesModule, config.scalarModule, CorePlus.$$Option.getOr(config.nullType, "null"), CorePlus.$$Option.getOr(config.listType, "array"));
    return res;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.log(e);
    throw e;
  }
}

export {
  plugin ,
}
/* CorePlus Not a pure module */
