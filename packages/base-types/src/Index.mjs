// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CorePlus from "@rescript-graphql-codegen/core-plus/src/CorePlus.mjs";
import * as Schema$Graphql from "@rescript-graphql-codegen/graphql/src/Schema.mjs";
import * as Helpers$GraphqlCodegen from "@rescript-graphql-codegen/graphql-codegen/src/Helpers.mjs";

function makePrintInputObjectType(config) {
  var scalarModule = config.scalarModule;
  var listType = CorePlus.$$Option.getOr(config.listType, "array");
  var nullType = CorePlus.$$Option.getOr(config.nullType, "null");
  return function (inputObject) {
    var fields = Schema$Graphql.InputObject.getFields(inputObject);
    return ["  type t = {"].concat(Object.entries(fields).flatMap(function (param) {
                    var match = Helpers$GraphqlCodegen.sanitizeFieldName(param[0], fields);
                    var alias = match[1];
                    var printInput = function (_i, _w) {
                      while(true) {
                        var w = _w;
                        var i = _i;
                        var s = Schema$Graphql.Input.parse(i);
                        switch (s.TAG) {
                          case "Scalar" :
                              return w(nullType + "<" + scalarModule + "." + CorePlus.$$String.pascalCase(Schema$Graphql.Scalar.name(s._0)) + ".t>");
                          case "Enum" :
                              return w(nullType + "<" + CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name(s._0)) + ".t>");
                          case "InputObject" :
                              return w(nullType + "<" + CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(s._0)) + ".t>");
                          case "List" :
                              _w = (function(w){
                              return function (s) {
                                return w(nullType + "<" + listType + "<" + s + ">>");
                              }
                              }(w));
                              _i = Schema$Graphql.List.ofType(s._0);
                              continue ;
                          case "NonNull" :
                              var s$1 = Schema$Graphql.Input.parse_nn(Schema$Graphql.NonNull.ofType(s._0));
                              switch (s$1.TAG) {
                                case "Scalar" :
                                    return w(scalarModule + "." + CorePlus.$$String.pascalCase(Schema$Graphql.Scalar.name(s$1._0)) + ".t");
                                case "Enum" :
                                    return w(CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name(s$1._0)) + ".t");
                                case "InputObject" :
                                    return w(CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(s$1._0)) + ".t");
                                case "List" :
                                    _w = (function(w){
                                    return function (s) {
                                      return w(listType + "<" + s + ">");
                                    }
                                    }(w));
                                    _i = Schema$Graphql.List.ofType(s$1._0);
                                    continue ;
                                
                              }
                          
                        }
                      };
                    };
                    var value = printInput(Schema$Graphql.InputField.type_(param[1]), (function (s) {
                            return s;
                          }));
                    var mainLine = "    " + match[0] + ": " + value + ",";
                    if (alias !== undefined) {
                      return [
                              "    @as(\"" + alias + "\")",
                              mainLine
                            ];
                    } else {
                      return [mainLine];
                    }
                  }), ["  }"]);
  };
}

async function plugin(schema, _documents, config) {
  try {
    var printInputObjectType = makePrintInputObjectType(config);
    var match = CorePlus.Either.partition(CorePlus.$$Array.filterMap(Object.values(Schema$Graphql.getTypeMap(schema)), (function (t) {
                var e = Schema$Graphql.Named.parse(t);
                switch (e.TAG) {
                  case "Enum" :
                      return {
                              TAG: "Left",
                              _0: e._0
                            };
                  case "InputObject" :
                      return {
                              TAG: "Right",
                              _0: e._0
                            };
                  default:
                    return ;
                }
              })));
    var enumResult = match[0].map(function ($$enum) {
            var values = Schema$Graphql.Enum.getValues($$enum);
            return ["module " + CorePlus.$$String.pascalCase(Schema$Graphql.Enum.name($$enum)) + " = {"].concat(["  type t = "], values.flatMap(function (v) {
                              return [
                                      "    | @as(\"" + Schema$Graphql.EnumValue.value(v) + "\")",
                                      "    " + CorePlus.$$String.pascalCase(Schema$Graphql.EnumValue.name(v))
                                    ];
                            }), ["}"]).join("\n");
          }).join("\n\n");
    var inputObjectResult = Helpers$GraphqlCodegen.sortInputObjectsTopologically(match[1]).map(function (ior) {
            if (ior.TAG !== "NonRec") {
              return ior._0.map(function (io, ind) {
                            var moduleName = CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(io));
                            return [(
                                          ind === 0 ? "module rec" : "and"
                                        ) + " " + moduleName + ": {"].concat(printInputObjectType(io), ["} = " + moduleName]).join("\n");
                          }).join("\n\n");
            }
            var io = ior._0;
            return ["module " + CorePlus.$$String.pascalCase(Schema$Graphql.InputObject.name(io)) + " = {"].concat(printInputObjectType(io), ["}"]).join("\n");
          }).join("\n\n");
    var res = [
        enumResult,
        inputObjectResult
      ].join("\n\n");
    return res;
  }
  catch (e){
    throw e;
  }
}

export {
  makePrintInputObjectType ,
  plugin ,
}
/* CorePlus Not a pure module */
